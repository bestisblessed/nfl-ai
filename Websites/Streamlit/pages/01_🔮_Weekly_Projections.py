import streamlit as st
import pandas as pd
import numpy as np
import os
import glob

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Load upcoming games data for home/away determination
@st.cache_data
def load_upcoming_games():
    """Load upcoming games to determine home/away teams"""
    games_file = os.path.join(BASE_DIR, "upcoming_games.csv")
    if os.path.exists(games_file):
        games_df = pd.read_csv(games_file)
        # Create a mapping from matchup to home/away format
        games_mapping = {}
        for _, row in games_df.iterrows():
            # Store both team orders for lookup
            home, away = row['home_team'], row['away_team']
            games_mapping[(home, away)] = f"{away} @ {home}"
            games_mapping[(away, home)] = f"{away} @ {home}"
        return games_mapping
    return {}

# Page configuration
st.set_page_config(
    page_title="üîÆ NFL Game Projections",
    page_icon="üîÆ",
    layout="wide"
)

# Simple, clean styling
st.markdown("""
<style>
    .data-section {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e1e8ed;
        margin: 1rem 0;
    }
    .section-title {
        font-size: 2rem;
        font-weight: 700;
        color: #2A3439;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        text-align: center;
        /* border-bottom: 2px solid #3498db; */
    }
</style>
""", unsafe_allow_html=True)

st.markdown(f"""
    <div style='text-align: center;'>
        <div style='font-size: 3.1rem; font-weight: 800; padding-bottom: 0.5rem;'>
            NFL Game Projections
        </div>
        <div style='color: #7f8c8d; font-size: 1rem; margin-top: 0; line-height: 1.2;'>
            Weekly Player Projections Generated by Machine Learning Algorithms
        </div>
    </div>
    """,
    unsafe_allow_html=True
)
st.divider()
st.write("")

# Function to load projections data
@st.cache_data
def load_projections_data():
    """Load and process projections data from CSV files"""
    projections_dir = os.path.join(BASE_DIR, "data/projections")

    # Find all projection files
    projection_files = glob.glob(os.path.join(projections_dir, "week*_all_props_summary.csv"))

    if not projection_files:
        st.error(f"No projection files found in {projections_dir}")
        return None, []

    # Extract available weeks
    available_weeks = []
    for file in projection_files:
        week_num = file.split('week')[1].split('_')[0]
        available_weeks.append(int(week_num))

    available_weeks.sort()

    return projection_files, available_weeks

# Function to get projections for a specific week
@st.cache_data
def get_week_projections(week_num):
    """Get projections data for a specific week"""
    file_path = os.path.join(BASE_DIR, f"data/projections/week{week_num}_all_props_summary.csv")

    if not os.path.exists(file_path):
        return None

    try:
        df = pd.read_csv(file_path)

        # Clean and process the data
        df = df.dropna(subset=['pred_yards'])
        df['pred_yards'] = pd.to_numeric(df['pred_yards'], errors='coerce')
        df = df.dropna(subset=['pred_yards'])

        # Add trend (placeholder - could be enhanced with historical data)
        trends = np.random.choice(['‚ÜóÔ∏è', '‚Üí', '‚ÜòÔ∏è'], size=len(df), p=[0.3, 0.4, 0.3])
        df['trend'] = trends

        return df
    except Exception as e:
        st.error(f"Error loading week {week_num} data: {str(e)}")
        return None

# Load available data
projection_files, available_weeks = load_projections_data()

if not available_weeks:
    st.error("No projection data available. Please ensure projection files are in data/projections/")
    st.stop()

# Sidebar controls like Weekly Leaders page
st.sidebar.header("Week Selection")

# Week selection in sidebar
week_options = [f"Week {week}" for week in available_weeks]
selected_week_display = st.sidebar.selectbox(
    "Select Week:",
    options=week_options,
    index=len(week_options) - 1,
    help="Choose which week's projections to view"
)

# Get the selected week number
selected_week = selected_week_display.replace("Week ", "")

# Load data for selected week
projections_df = get_week_projections(int(selected_week))

if projections_df is None:
    st.error(f"No data available for {selected_week_display}")
    st.stop()

# Load games mapping for correct home/away designation
games_mapping = load_upcoming_games()

# Matchup selection in sidebar
st.sidebar.header("Matchup Selection")

# Create matchup options using correct home/away from games data
matchups = []
matchup_set = set()

for _, row in projections_df.iterrows():
    team1, team2 = row['team'], row['opp']
    # Try to get the correct @ format from games mapping
    matchup = games_mapping.get((team1, team2))
    if matchup is None:
        matchup = games_mapping.get((team2, team1))
    if matchup is None:
        # Fallback to alphabetical sorting if not found in games
        team1_sorted, team2_sorted = sorted([team1, team2])
        matchup = f"{team1_sorted} @ {team2_sorted}"

    if matchup not in matchup_set:
        matchup_set.add(matchup)
        matchups.append(matchup)

matchups = sorted(matchups)

selected_matchup = st.sidebar.selectbox(
    "Select Matchup:",
    options=matchups,
    help="Choose which game to view projections for"
)

# Apply matchup filter
if selected_matchup:
    team1, team2 = selected_matchup.split(" @ ")
    filtered_df = projections_df[
        ((projections_df['team'] == team1) & (projections_df['opp'] == team2)) |
        ((projections_df['team'] == team2) & (projections_df['opp'] == team1))
    ].copy()
else:
    filtered_df = projections_df.copy()

# Main data display
st.markdown(f"""
    <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        padding: 20px;
                        border-radius: 15px;
                        margin: 10px 0 25px 0;
                        text-align: center;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
        <h2 style='color: white; margin: 0; font-size: 2em; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'>
            {selected_matchup} - Projection Data
        </h2>
    </div>
    """,
    unsafe_allow_html=True
)
st.write("")

if filtered_df.empty:
    st.info("No data matches your filters. Try adjusting your selections.")
else:
    # Define the position-prop combinations we want to show
    position_prop_combinations = [
        ('QB', 'Passing Yards'),
        ('QB', 'Rushing Yards'),
        ('RB', 'Rushing Yards'),
        ('RB', 'Receiving Yards'),
        ('WR', 'Receiving Yards'),
        ('TE', 'Receiving Yards')
    ]

    # QB sections - side by side
    qb_cols = st.columns(2)

    # QB Passing Yards
    with qb_cols[0]:
        qb_passing_data = filtered_df[
            (filtered_df['position'] == 'QB') &
            (filtered_df['prop_type'] == 'Passing Yards')
        ].copy()

        if not qb_passing_data.empty:
            st.markdown('<h4 style="text-align: center; font-size: 1.1em; margin-bottom: 0.5em;">QB Passing Yards</h4>', unsafe_allow_html=True)
            display_df = qb_passing_data.sort_values('pred_yards', ascending=False)

            # st.markdown('<div class="data-section">', unsafe_allow_html=True)
            st.dataframe(
                display_df[['full_name', 'team', 'pred_yards']].rename(columns={
                    'full_name': 'Player',
                    'team': 'Team',
                    'pred_yards': 'Projected Yards'
                }),
                use_container_width=True,
                hide_index=True
            )
            st.markdown('</div>', unsafe_allow_html=True)

    # QB Rushing Yards
    with qb_cols[1]:
        qb_rushing_data = filtered_df[
            (filtered_df['position'] == 'QB') &
            (filtered_df['prop_type'] == 'Rushing Yards')
        ].copy()

        if not qb_rushing_data.empty:
            st.markdown('<h4 style="text-align: center; font-size: 1.1em; margin-bottom: 0.5em;">QB Rushing Yards</h4>', unsafe_allow_html=True)
            display_df = qb_rushing_data.sort_values('pred_yards', ascending=False)

            # st.markdown('<div class="data-section">', unsafe_allow_html=True)
            st.dataframe(
                display_df[['full_name', 'team', 'pred_yards']].rename(columns={
                    'full_name': 'Player',
                    'team': 'Team',
                    'pred_yards': 'Projected Yards'
                }),
                use_container_width=True,
                hide_index=True
            )
            st.markdown('</div>', unsafe_allow_html=True)

    # RB sections - side by side
    rb_cols = st.columns(2)

    # RB Rushing Yards
    with rb_cols[0]:
        rb_rushing_data = filtered_df[
            (filtered_df['position'] == 'RB') &
            (filtered_df['prop_type'] == 'Rushing Yards')
        ].copy()

        if not rb_rushing_data.empty:
            st.markdown('<h4 style="text-align: center; font-size: 1.1em; margin-bottom: 0.5em;">RB Rushing Yards</h4>', unsafe_allow_html=True)
            display_df = rb_rushing_data.sort_values('pred_yards', ascending=False)

            # st.markdown('<div class="data-section">', unsafe_allow_html=True)
            st.dataframe(
                display_df[['full_name', 'team', 'pred_yards']].rename(columns={
                    'full_name': 'Player',
                    'team': 'Team',
                    'pred_yards': 'Projected Yards'
                }),
                use_container_width=True,
                hide_index=True
            )
            st.markdown('</div>', unsafe_allow_html=True)

    # RB Receiving Yards
    with rb_cols[1]:
        rb_receiving_data = filtered_df[
            (filtered_df['position'] == 'RB') &
            (filtered_df['prop_type'] == 'Receiving Yards')
        ].copy()

        if not rb_receiving_data.empty:
            st.markdown('<h4 style="text-align: center; font-size: 1.1em; margin-bottom: 0.5em;">RB Receiving Yards</h4>', unsafe_allow_html=True)
            display_df = rb_receiving_data.sort_values('pred_yards', ascending=False)

            # st.markdown('<div class="data-section">', unsafe_allow_html=True)
            st.dataframe(
                display_df[['full_name', 'team', 'pred_yards']].rename(columns={
                    'full_name': 'Player',
                    'team': 'Team',
                    'pred_yards': 'Projected Yards'
                }),
                use_container_width=True,
                hide_index=True
            )
            st.markdown('</div>', unsafe_allow_html=True)

    # WR and TE Receiving Yards (side by side)
    wr_te_cols = st.columns(2)

    # WR Receiving Yards
    with wr_te_cols[0]:
        wr_receiving_data = filtered_df[
            (filtered_df['position'] == 'WR') &
            (filtered_df['prop_type'] == 'Receiving Yards')
        ].copy()

        if not wr_receiving_data.empty:
            st.markdown('<h4 style="text-align: center; font-size: 1.1em; margin-bottom: 0.5em;">WR Receiving Yards</h4>', unsafe_allow_html=True)
            display_df = wr_receiving_data.sort_values('pred_yards', ascending=False)

            # st.markdown('<div class="data-section">', unsafe_allow_html=True)
            st.dataframe(
                display_df[['full_name', 'team', 'pred_yards']].rename(columns={
                    'full_name': 'Player',
                    'team': 'Team',
                    'pred_yards': 'Projected Yards'
                }),
                use_container_width=True,
                hide_index=True
            )
            # st.markdown('</div>', unsafe_allow_html=True)

    # TE Receiving Yards
    with wr_te_cols[1]:
        te_receiving_data = filtered_df[
            (filtered_df['position'] == 'TE') &
            (filtered_df['prop_type'] == 'Receiving Yards')
        ].copy()

        if not te_receiving_data.empty:
            st.markdown('<h4 style="text-align: center; font-size: 1.1em; margin-bottom: 0.5em;">TE Receiving Yards</h4>', unsafe_allow_html=True)
            display_df = te_receiving_data.sort_values('pred_yards', ascending=False)

            # st.markdown('<div class="data-section">', unsafe_allow_html=True)
            st.dataframe(
                display_df[['full_name', 'team', 'pred_yards']].rename(columns={
                    'full_name': 'Player',
                    'team': 'Team',
                    'pred_yards': 'Projected Yards'
                }),
                use_container_width=True,
                hide_index=True
            )
            # st.markdown('</div>', unsafe_allow_html=True)

# Footer
st.divider()
st.markdown("NFL AI ¬© 2023 | Tyler Durette")
